/* Copyright (c) 2019-2020, Sascha Willems
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
	rt_basic/raygen.rgen

	Basic ray gen shader
*/

#version 460
#extension GL_KHR_vulkan_glsl : enable // Vulkan-specific syntax
#extension GL_GOOGLE_include_directive : enable // Include files
#extension GL_EXT_ray_tracing : enable // Raytracing

// Include structs and bindings

#include "../rt_common/bindpoints.glsl"
#include "../common/camera.glsl"
#include "../rt_common/tlas.glsl"
#include "../rt_common/imageoutput.glsl"
#include "../common/random.glsl"

// Declare hitpayloads

#define HITPAYLOAD_OUT
#include "../rt_common/payload.glsl"

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = Camera.InverseViewMatrix * vec4(0,0,0,1);
	vec4 target = Camera.InverseProjectionMatrix * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = Camera.InverseViewMatrix*vec4(normalize(target.xyz), 0) ;

	float tmin = 0.001;
	float tmax = 10000.0;

    ChildPayload = ConstructHitPayload();
	ChildPayload.Seed = gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x;

    traceRayEXT(MainTlas, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

	imageStore(ImageOutput, ivec2(gl_LaunchIDEXT.xy), vec4(ChildPayload.Radiance, 1.0));
}
