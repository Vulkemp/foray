/*
    rt_common/payload.glsl

    Defines the default HitPayload struct and layout macros for input and output payloads
*/

#ifndef PAYLOAD_GLSL
#define PAYLOAD_GLSL

#include "../shading/constants.glsl"

/// @brief Hit payload data (passed back to ray generation after ray dispatch)
struct HitPayload
{
    /// @brief Radiance in Watt per steradian per square meter
    vec3 Radiance;
    /// @brief Attenuation is a multiplier for the contribution of the current ray to its originally generated ray
    vec3 Attenuation;
    /// @brief Seed is a per ray generated seed value for random number generation
    uint Seed;
    /// @brief Ray Recursion Depth
    uint Depth;
    /// @brief Ray Distance
    float Distance;
};

/// @brief HitPayload default constructor
HitPayload ConstructHitPayload() 
{
    HitPayload result;
    result.Radiance = vec3(0.f);
    result.Attenuation = vec3(1.f);
    result.Seed = 0;
    result.Depth = 0;
    result.Distance = 10000.f;
    return result;
}

#endif // PAYLOAD_GLSL

#ifdef HITPAYLOAD_OUT
/// @brief HitPayload that contains return information from rays generated by the current shader
layout(location = 0) rayPayloadEXT HitPayload ChildPayload;
#endif // HITPAYLOAD_OUT
#ifdef HITPAYLOAD_IN
/// @brief HitPayload returned to the ray generation context of the current hit/miss shader
layout(location = 1) rayPayloadInEXT HitPayload ReturnPayload;
#endif // HITPAYLOAD_IN
